{{- /*
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: sogo
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  {{- with .Values.sogo.config  }}
  sogo.conf: |
    {
      /* *********************  Main SOGo configuration file  **********************
      *                                                                           *
      * Since the content of this file is a dictionary in OpenStep plist format,  *
      * the curly braces enclosing the body of the configuration are mandatory.   *
      * See the Installation Guide for details on the format.                     *
      *                                                                           *
      * C and C++ style comments are supported.                                   *
      *                                                                           *
      * This example configuration contains only a subset of all available        *
      * configuration parameters. Please see the installation guide more details. *
      *                                                                           *
      * ~sogo/GNUstep/Defaults/.GNUstepDefaults has precedence over this file,    *
      * make sure to move it away to avoid unwanted parameter overrides.          *
      *                                                                           *
      * **************************************************************************/

      /* Database configuration (mysql://, postgresql:// or oracle://) */
      OCSAdminURL             = "{{ ( include "sogo.databaseURL" $ ) }}/sogo_admin";
      SOGoProfileURL          = "{{ ( include "sogo.databaseURL" $ ) }}/sogo_user_profile";
      OCSFolderInfoURL        = "{{ ( include "sogo.databaseURL" $ ) }}/sogo_folder_info";
      OCSSessionsFolderURL    = "{{ ( include "sogo.databaseURL" $ ) }}/sogo_sessions_folder";
      OCSEMailAlarmsFolderURL = "{{ ( include "sogo.databaseURL" $ ) }}/sogo_alarms_folder";
      OCSStoreURL             = "{{ ( include "sogo.databaseURL" $ ) }}/sogo_store";
      OCSAclURL               = "{{ ( include "sogo.databaseURL" $ ) }}/sogo_acl";
      OCSCacheFolderURL       = "{{ ( include "sogo.databaseURL" $ ) }}/sogo_cache_folder";
      OCSOpenIdURL            = "{{ ( include "sogo.databaseURL" $ ) }}/sogo_openid";

      /* Mail */
      SOGoDraftsFolderName = "{{ .imap.folderNames.drafts }}";
      SOGoSentFolderName = "{{ .imap.folderNames.sent }}";
      SOGoTrashFolderName = "{{ .imap.folderNames.trash }}";
      SOGoJunkFolderName = "{{ .imap.folderNames.junk }}";
      SOGoIMAPServer = {{ printf "%s://%s:%d" (ternary "imaps" "imap" .imap.server.tls) .imap.server.host (int .imap.server.port) | quote }};
      SOGoSieveServer = {{ printf "sieve://%s:%d/%s" .imap.server.host (int .imap.server.sievePort) (ternary "?tls=YES" "" .imap.server.tls) | quote }};
      SOGoSMTPServer = {{ printf "%s://%s:%d" (ternary "smtps" "smtp" .imap.server.tls) .imap.server.host (int .imap.server.smtpPort) | quote }};
      SOGoMailDomain = "{{ .domain }}";
      SOGoMailingMechanism = "smtp";
      SOGoSieveFolderEncoding = "UTF-8";
      SOGoIMAPAclConformsToIMAPExt = NO;
      SOGoIMAPAclStyle = "rfc4314";
      //SOGoForceExternalLoginWithEmail = NO;
      //SOGoMailSpoolPath = "/var/spool/sogo";
      SOGoMailUseOutlookStyleReplies = YES;

      /* Notifications */
      //SOGoAppointmentSendEMailNotifications = NO;
      //SOGoACLsSendEMailNotifications = NO;
      //SOGoFoldersSendEMailNotifications = NO;

      /* Authentication */
      //SOGoPasswordChangeEnabled = YES;
      SOGoPasswordRecoveryMode = Disabled;
      {{- if .openid.enabled }}
      SOGoAuthenticationType = "openid";
      SOGoXSRFValidationEnabled = NO;
      SOGoSMTPAuthenticationType = "xoauth2";
      NGImap4AuthMechanism = "xoauth2";
      SOGoOpenIdConfigUrl = "{{ .openid.url }}/.well-known/openid-configuration";
      SOGoOpenIdClient = "${SOGO_OPENID_CLIENT}";
      SOGoOpenIdClientSecret = "${SOGO_OPENID_SECRET}";
      SOGoOpenIdScope = "{{ .openid.scopes }}";
      SOGoOpenIdEmailParam = "{{ .openid.nameClaim }}";
      SOGoOpenIdEnableRefreshToken = YES;
      SOGoOpenIdTokenCheckInterval = 30;
      SOGoOpenIdLogoutEnabled = YES;
      {{- else }}
      SOGoSMTPAuthenticationType = "PLAIN";
      NGImap4AuthMechanism = "plain";
      NGImap4ConnectionStringSeparator = "/";
      {{- end }}

      {{- if .ldap.enabled }}
      SOGoUserSources = (
        {
          type = ldap;
          CNFieldName = "{{ .ldap.cn }}";
          IDFieldName = "{{ .ldap.id }}";
          UIDFieldName = "{{ .ldap.uid }}";
          baseDN = "{{ .ldap.base }}";
          scope = "{{ .ldap.scope }}";
          bindDN = "${SOGO_LDAP_DN}";
          bindPassword = "${SOGO_LDAP_PASSWORD}";
          bindFields = ("{{ .ldap.uid }}");
          userPasswordAlgorithm = "crypt";
          canAuthenticate = YES;
          displayName = "Public";
          hostname = {{ join " " .ldap.uris | quote }};
          filter = "{{ .ldap.filter }}";
          id = directory;
          isAddressBook = YES;
          mapping = {
            mozillahomestreet = ("mozillahomestreet", "mozillahomestreet2", "streetAddress");
            mozillahomelocalityname = ("mozillahomelocalityname", "l");
            mozillahomepostalcode = ("mozillahomepostalcode", "postalCode");
            mozillahomestate = ("mozillahomestate", "st");
            mozillahomecountryname = ("mozillahomecountryname", "co");
            mozillahomeurl = ("mozillahomeurl", "wWWHomePage");
            street = ();
            l = ();
            st = ();
            postalCode = ();
            c = ();
          };
        }
      );
      {{- end }}

      /* Web Interface */
      WOPort = "0.0.0.0:20000";
      SOGoPageTitle = "{{ .title }}";
      SOGoVacationEnabled = YES;
      SOGoForwardEnabled = YES;
      SOGoSieveScriptsEnabled = YES;
      //SOGoMailAuxiliaryUserAccountsEnabled = YES;
      //SOGoTrustProxyAuthentication = NO;
      SOGoFirstDayOfWeek = 1;
      SOGoFirstWeekOfYear = "First4DayWeek";
      SOGoMailMessageForwarding = "inline";
      SOGoMailReplyPlacement = "above";
      SOGoEnableEMailAlarms = YES;

      /* General - SOGoTimeZone *MUST* be defined */
      SOGoLanguage = "{{ .language }}";
      SOGoTimeZone = "{{ .timezone }}";
      //SOGoCalendarDefaultRoles = (
      //  PublicDAndTViewer,
      //  ConfidentialDAndTViewer
      //);
      SOGoSuperUsernames = ({{ join ", " .superUsers }});
      //SxVMemLimit = 384;
      WOWorkersCount = {{ default 10 .workerCount }};
      WOPidFile = "/tmp/sogo.pid";
      SOGoMemcachedHost = "{{ printf "%s-memcached" ( include "common.names.fullname" $ ) }}";
      
      /* Debug */
      SOGoDebugRequests = {{ ternary "YES" "NO" .debug }};
      //SoDebugBaseURL = {{ ternary "YES" "NO" .debug }};
      ImapDebugEnabled = {{ ternary "YES" "NO" .debug }};
      LDAPDebugEnabled = {{ ternary "YES" "NO" .debug }};
      //PGDebugEnabled = {{ ternary "YES" "NO" .debug }};
      //MySQL4DebugEnabled = {{ ternary "YES" "NO" .debug }};
      SOGoUIxDebugEnabled = {{ ternary "YES" "NO" .debug }};
      //WODontZipResponse = {{ ternary "YES" "NO" .debug }};
      WOLogFile = "/dev/stdout";
    }
  ssmtp.conf: |
    #
    # Config file for sSMTP sendmail
    #
    # The person who gets all mail for userids < 1000
    # Make this empty to disable rewriting.
    root=postmaster

    # The place where the mail goes. The actual machine name is required no 
    # MX records are consulted. Commonly mailhosts are named mail.domain.com
    mailhub={{ .imap.server.host }}:{{ .imap.server.smtpport }}
    UseSTARTTLS=no
    UseTLS={{ ternary "yes" "no" .imap.server.tls }}

    # Where will the mail seem to come from?
    #rewriteDomain=

    # The full hostname
    hostname=sogo.{{ .domain }}

    # Are users allowed to set their own From: address?
    # YES - Allow the user to specify their own From: address
    # NO - Use the system generated From: address
    #FromLineOverride=YES
  {{- if .ldap.ca }}
  ca.crt:
    {{- .ldap.ca | nindent 4 }}
  {{- end }}
  {{- end }}
