{{- /*
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}-memcached
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: sogo-memcached
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.memcached.autoscaling.enabled }}
  replicas: {{ .Values.memcached.replicaCount }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  {{- if .Values.memcached.updateStrategy }}
  strategy: {{- toYaml .Values.memcached.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.memcached.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.memcached.podLabels "context" $) | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.memcached.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.memcached.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- include "sogo.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "sogo.serviceAccountName" . }}
      {{- if .Values.memcached.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.memcached.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.memcached.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.memcached.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.memcached.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.memcached.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.memcached.nodeAffinityPreset.type "key" .Values.memcached.nodeAffinityPreset.key "values" .Values.memcached.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.memcached.schedulerName }}
      schedulerName: {{ .Values.memcached.schedulerName }}
      {{- end }}
      {{- if .Values.memcached.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.memcached.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      priorityClassName: {{ .Values.memcached.priorityClassName | quote }}
      {{- if .Values.memcached.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.memcached.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.memcached.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.memcached.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.memcached.hostAliases }}
      # yamllint disable rule:indentation
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.memcached.hostAliases "context" $) | nindent 8 }}
      # yamllint enable rule:indentation
      {{- end }}
      initContainers:
        {{- if .Values.memcached.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.memcached.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ include "common.names.fullname" . }}
          image: {{ template "sogo.memcached.image" . }}
          imagePullPolicy: {{ .Values.memcached.image.pullPolicy | quote }}
          {{- if .Values.memcached.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.memcached.command "context" $) | nindent 12 }}
          {{- end }}
          args:
            {{- if .Values.memcached.config.memoryLimit }}
            - "-m"
            - {{ .Values.memcached.config.memoryLimit | quote }}
            {{- end }}
            {{- if .Values.memcached.config.maxConnections }}
            - "-c"
            - {{ .Values.memcached.config.maxConnections | quote }}
            {{- end }}
            {{- if .Values.memcached.config.verbosity }}
            - {{ printf "-%s" (repeat .Values.memcached.config.verbosity "v") | quote }}
            {{- end }}
            {{- range .Values.memcached.config.extraArgs }}
            - {{ . | quote }}
            {{- end }}
          securityContext:
            runAsUser: 999
          env:
            {{- if .Values.memcached.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.memcached.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.memcached.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.memcached.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.memcached.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.memcached.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.memcached.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.memcached.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          ports:
            - name: memcached
              containerPort: {{ .Values.memcached.containerPorts.memcached }}
              protocol: TCP
          {{- if .Values.memcached.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.memcached.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.memcached.startupProbe.enabled }}
          startupProbe:
            tcpSocket:
              port: memcached
            initialDelaySeconds: {{ .Values.memcached.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.memcached.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.memcached.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.memcached.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.memcached.startupProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.memcached.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.memcached.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.memcached.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: memcached
            initialDelaySeconds: {{ .Values.memcached.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.memcached.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.memcached.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.memcached.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.memcached.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.memcached.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.memcached.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.memcached.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: memcached
            initialDelaySeconds: {{ .Values.memcached.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.memcached.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.memcached.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.memcached.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.memcached.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.memcached.resources }}
          resources: {{- toYaml .Values.memcached.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/memcached
            {{- if .Values.memcached.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.memcached.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.memcached.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.memcached.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "common.names.fullname" . }}
        {{- if .Values.memcached.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.memcached.extraVolumes "context" $) | nindent 8 }}
        {{- end }}